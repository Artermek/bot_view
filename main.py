from typing import List
import os
import base64
import asyncio

from fastapi import FastAPI, UploadFile, File, HTTPException
from fastapi.responses import JSONResponse
from fastapi.middleware.cors import CORSMiddleware
from openai import OpenAI

# Если хотите хранить OPENAI_API_KEY в .env локально:
from dotenv import load_dotenv
app = FastAPI()

# CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=[
        "https://siriusfuture.ru",
        "https://www.siriusfuture.ru",
        "https://*.tilda.ws",
        "https://tilda.cc",
        "https://static.tildacdn.com",
    ],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Промпт для категории «Дом, Дерево, Человек»
PROMPT_HOUSE_TREE_PERSON = """
Перед тобой — скан или фотография детского рисунка темы «Дом, дерево, человек».
Твоя задача на основе критериев оценки проанализировать фотографию и в каждом пункте
выбрать критерий, который ближе подходит к рисунку.

Если тебе отправили фотографию, которая не похожа на рисунок
ответь: «Это не похоже на детский рисунок, пожалуйста, отправьте другое изображение
или сделайте более чёткий снимок».

Базовые критерии оценки рисунка:
I. Общие характеристики и организация рисунка:
 1. Размер рисунка:
    - Большой размер: Может указывать на экстраверсию, уверенность в себе, экспансивность...
    - Маленький размер: Может указывать на интроверсию, неуверенность...
 2. Расположение на листе: В центре, сверху, снизу, слева, справа...
 3. Сила нажима: Сильный, слабый...
 4. Характер линий: Четкие ровные, прерывистые, затемненные...
 5. Общая композиция: Гармоничная, перегруженная, минималистичная.

II. Оценка рисунка Дома:
 1. Общее впечатление: Дом — символ «Я», семейных отношений, безопасности.
 2. Фундамент: Наличие, отсутствие, слабый — что это значит.
 3. Стены: Крепкие, тонкие, заштрихованные...
 4. Крыша: Большая, маленькая, отсутствует...
 5. Дверь: Большая, маленькая, закрытая, без ручки...
 6. Окна: Большие, маленькие, с занавесками, отсутствуют...
 7. Труба: С дымом, без, интенсивный дым, труба без дома...

III. Оценка рисунка Дерева:
 1. Корни: Наличие, отсутствие, подчёркнутые...
 2. Ствол: Крепкий, тонкий, искривлённый, с дуплами...
 3. Ветви: Поднятые, опущенные, колючие, обрубленные...
 4. Крона: Пышная, небольшая, отсутствует...
 5. Плоды/листья: Наличие, отсутствие...

IV. Оценка рисунка Человека:
 1. Голова: Большая, маленькая, подчёркнутые глаза, отсутствие ушей и т.п.
 2. Тело и конечности: Широкие/узкие плечи, сильные/слабые руки и ноги...
 3. Одежда: Подробная, схематичная, неопрятная...
""".strip()

# Промпт для категории «Несуществующее животное»
PROMPT_ANIMAL = """
Перед тобой — скан или фотография детского рисунка темы «Несуществующее животное».
Твоя задача на основе критериев оценки:
I. Общие характеристики и организация рисунка:
 1. Размер животного: Большой, средний, маленький...
 2. Расположение на листе: В центре, сверху, снизу, слева, справа...
 3. Сила нажима: Сильный, слабый...
 4. Характер линий: Четкие ровные, прерывистые, заштрихованные...
 5. Общая композиция: Сбалансированная, перегруженная, минималистичная.

II. Анализ деталей животного:
 1. Голова: Размер, форма...
 2. Глаза: Большие, маленькие, без зрачков, подчёркнутые ресницы...
 3. Рот: Открытый, с зубами, отсутствует...
 4. Уши: Большие, маленькие, отсутствуют...
 5. Рога/когти/шипы: Наличие, отсутствие, количество...
 6. Крылья/плавники: Наличие, символика...
 7. Хвост: Длинный, короткий, поднятый, опущенный...

III. Анализ названия и описания:
 1. Название: Простое, сложное, агрессивное, смешное...
 2. Описание: Какие черты характера отражает...

IV. Среда обитания и образ жизни:
 1. Место обитания...
 2. Способ питания...
 3. Взаимодействие с другими...
""".strip()

# Промпт для категории «Автопортрет»
PROMPT_SELF_PORTRAIT = """
Перед тобой — скан или фотография детского рисунка темы «Автопортрет».
Твоя задача на основе критериев оценки:
I. Общие характеристики и организация рисунка:
 1. Размер фигуры: Большой, средний, маленький...
 2. Расположение на листе: В центре, сверху, снизу, слева, справа...
 3. Сила нажима: Сильный, слабый...
 4. Характер линий: Четкие ровные, прерывистые, заштрихованные...
 5. Общая композиция: Сбалансированная, перегруженная, минималистичная.

II. Анализ деталей фигуры:
 1. Голова: Размер, форма, выражение...
 2. Лицо: Глаза, рот, выражение...
 3. Уши: Большие, маленькие, отсутствуют...
 4. Тело: Плечи, шея, талия...
 5. Руки: Длинные, короткие, спрятанные...
 6. Ноги: Длинные, короткие...
 7. Одежда: Подробная, схематичная, неопрятная...
""".strip()

@app.post("/upload")
async def upload_images(files: List[UploadFile] = File(...)):
    """
    Принимает в form-data:
      files: UploadFile (ровно 3 файла, переданные трижды под одним именем)
    Возвращает:
      { "analyses": [ответ1, ответ2, ответ3] }
    """
    # Проверяем, что прислали ровно 3 файла
    if len(files) != 3:
        raise HTTPException(
            status_code=400,
            detail=f"Нужно ровно 3 файла, пришло {len(files)}"
        )

    # Сопоставляем каждому файлу свой промпт
    prompts = [
        PROMPT_HOUSE_TREE_PERSON,
        PROMPT_ANIMAL,
        PROMPT_SELF_PORTRAIT,
    ]

    # Подготовка: читаем и кодируем base64
    prepared = []
    for idx, (file, prompt) in enumerate(zip(files, prompts), start=1):
        if not file.content_type.startswith("image/"):
            raise HTTPException(
                status_code=400,
                detail=f"Файл #{idx} не является изображением: {file.content_type}"
            )
        data = await file.read()
        b64 = base64.b64encode(data).decode("utf-8")
        prepared.append((file.content_type, b64, prompt, idx))

    # Функция-обёртка для синхронного OpenAI в executor
    async def analyze(content_type: str, b64: str, prompt: str, idx: int):
        loop = asyncio.get_running_loop()
        try:
            def call_openai():
                client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
                resp = client.chat.completions.create(
                    model="gpt-4o-mini",
                    messages=[{
                        "role": "user",
                        "content": [
                            {"type": "text", "text": prompt},
                            {
                                "type": "image_url",
                                "image_url": {"url": f"data:{content_type};base64,{b64}"}
                            },
                        ],
                    }]
                )
                return resp.choices[0].message.content

            return await loop.run_in_executor(None, call_openai)
        except Exception as e:
            return f"Ошибка анализа файла #{idx}: {e}"

    # Запускаем все три анализа параллельно
    tasks = [
        analyze(ct, b64, prmpt, idx)
        for ct, b64, prmpt, idx in prepared
    ]
    results = await asyncio.gather(*tasks)

    return JSONResponse(content={"analyses": results})