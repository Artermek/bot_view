from fastapi import FastAPI, UploadFile, File, Form, HTTPException
from fastapi.responses import JSONResponse
from fastapi.middleware.cors import CORSMiddleware
from openai import OpenAI
import base64
import os

app = FastAPI()

# CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=[
        "https://siriusfuture.ru",
        "https://www.siriusfuture.ru",
        "https://*.tilda.ws",
        "https://tilda.cc",
        "https://static.tildacdn.com",
    ],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Промпт для категории «Дом, Дерево, Человек»
PROMPT_HOUSE_TREE_PERSON = """
Перед тобой — скан или фотография детского рисунка темы «Дом, дерево, человек».
Твоя задача на основе критериев оценки проанализировать фотографию и в каждом пункте
выбрать критерий, который ближе подходит к рисунку.

Если тебе отправили фотографию, которая не похожа на рисунок или плохо видна — 
ответь: «Это не похоже на детский рисунок, пожалуйста, отправьте другое изображение
или сделайте более чёткий снимок».

Базовые критерии оценки рисунка:
I. Общие характеристики и организация рисунка:
 1. Размер рисунка:
    - Большой размер: Может указывать на экстраверсию, уверенность в себе, экспансивность...
    - Маленький размер: Может указывать на интроверсию, неуверенность...
 2. Расположение на листе: В центре, сверху, снизу, слева, справа...
 3. Сила нажима: Сильный, слабый...
 4. Характер линий: Четкие ровные, прерывистые, затемненные...
 5. Общая композиция: Гармоничная, перегруженная, минималистичная.

II. Оценка рисунка Дома:
 1. Общее впечатление: Дом — символ «Я», семейных отношений, безопасности.
 2. Фундамент: Наличие, отсутствие, слабый — что это значит.
 3. Стены: Крепкие, тонкие, заштрихованные...
 4. Крыша: Большая, маленькая, отсутствует...
 5. Дверь: Большая, маленькая, закрытая, без ручки...
 6. Окна: Большие, маленькие, с занавесками, отсутствуют...
 7. Труба: С дымом, без, интенсивный дым, труба без дома...

III. Оценка рисунка Дерева:
 1. Корни: Наличие, отсутствие, подчёркнутые...
 2. Ствол: Крепкий, тонкий, искривлённый, с дуплами...
 3. Ветви: Поднятые, опущенные, колючие, обрубленные...
 4. Крона: Пышная, небольшая, отсутствует...
 5. Плоды/листья: Наличие, отсутствие...

IV. Оценка рисунка Человека:
 1. Голова: Большая, маленькая, подчёркнутые глаза, отсутствие ушей и т.п.
 2. Тело и конечности: Широкие/узкие плечи, сильные/слабые руки и ноги...
 3. Одежда: Подробная, схематичная, неопрятная...
""".strip()

# Промпт для категории «Несуществующее животное»
PROMPT_ANIMAL = """
Перед тобой — скан или фотография детского рисунка темы «Несуществующее животное».
Твоя задача на основе критериев оценки:
I. Общие характеристики и организация рисунка:
 1. Размер животного: Большой, средний, маленький...
 2. Расположение на листе: В центре, сверху, снизу, слева, справа...
 3. Сила нажима: Сильный, слабый...
 4. Характер линий: Четкие ровные, прерывистые, заштрихованные...
 5. Общая композиция: Сбалансированная, перегруженная, минималистичная.

II. Анализ деталей животного:
 1. Голова: Размер, форма...
 2. Глаза: Большие, маленькие, без зрачков, подчёркнутые ресницы...
 3. Рот: Открытый, с зубами, отсутствует...
 4. Уши: Большие, маленькие, отсутствуют...
 5. Рога/когти/шипы: Наличие, отсутствие, количество...
 6. Крылья/плавники: Наличие, символика...
 7. Хвост: Длинный, короткий, поднятый, опущенный...

III. Анализ названия и описания:
 1. Название: Простое, сложное, агрессивное, смешное...
 2. Описание: Какие черты характера отражает...

IV. Среда обитания и образ жизни:
 1. Место обитания...
 2. Способ питания...
 3. Взаимодействие с другими...
""".strip()

# Промпт для категории «Автопортрет»
PROMPT_SELF_PORTRAIT = """
Перед тобой — скан или фотография детского рисунка темы «Автопортрет».
Твоя задача на основе критериев оценки:
I. Общие характеристики и организация рисунка:
 1. Размер фигуры: Большой, средний, маленький...
 2. Расположение на листе: В центре, сверху, снизу, слева, справа...
 3. Сила нажима: Сильный, слабый...
 4. Характер линий: Четкие ровные, прерывистые, заштрихованные...
 5. Общая композиция: Сбалансированная, перегруженная, минималистичная.

II. Анализ деталей фигуры:
 1. Голова: Размер, форма, выражение...
 2. Лицо: Глаза, рот, выражение...
 3. Уши: Большие, маленькие, отсутствуют...
 4. Тело: Плечи, шея, талия...
 5. Руки: Длинные, короткие, спрятанные...
 6. Ноги: Длинные, короткие...
 7. Одежда: Подробная, схематичная, неопрятная...
""".strip()

@app.post("/upload")
async def upload_three_images(
    file1: UploadFile = File(...),
    file2: UploadFile = File(...),
    file3: UploadFile = File(...)
):
    """
    Принимает одновременно три файла:
      - file1: «Дом, дерево, человек»
      - file2: «Несуществующее животное»
      - file3: «Автопортрет»

    Возвращает JSON:
      { "analyses": [ответ1, ответ2, ответ3] }
    """
    # Шагаем по каждому файлу, читаем и кодируем в base64
    inputs = [
        (file1, PROMPT_HOUSE_TREE_PERSON, 1),
        (file2, PROMPT_ANIMAL,             2),
        (file3, PROMPT_SELF_PORTRAIT,      3),
    ]
    prepared = []
    for file, prompt, idx in inputs:
        if not file.content_type.startswith("image/"):
            raise HTTPException(400, f"file{idx} не изображение: {file.content_type}")
        data = await file.read()
        b64 = base64.b64encode(data).decode("utf-8")
        prepared.append((file.content_type, b64, prompt, idx))

    # Асинхронная обёртка для вызова OpenAI в ThreadPool
    async def analyze(content_type: str, b64: str, prompt: str, idx: int):
        loop = asyncio.get_running_loop()
        try:
            def call_openai():
                client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
                resp = client.chat.completions.create(
                    model="gpt-4o-mini",
                    messages=[
                        {
                            "role": "user",
                            "content": [
                                {"type": "text", "text": prompt},
                                {
                                    "type": "image_url",
                                    "image_url": {"url": f"data:{content_type};base64,{b64}"}
                                },
                            ],
                        }
                    ],
                )
                return resp.choices[0].message.content
            # Запускаем в отдельном потоке, чтобы не блокировать event loop
            return await loop.run_in_executor(None, call_openai)
        except Exception as e:
            return f"Ошибка анализа file{idx}: {e}"

    # Стартуем все три задачи параллельно
    tasks = [analyze(ct, b64, prmpt, idx) for ct, b64, prmpt, idx in prepared]
    results = await asyncio.gather(*tasks)

    return JSONResponse(content={"analyses": results})